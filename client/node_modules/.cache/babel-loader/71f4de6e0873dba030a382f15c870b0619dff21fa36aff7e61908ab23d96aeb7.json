{"ast":null,"code":"var _jsxFileName = \"/Users/moeezahmad/CareAI/client/src/contexts/SocketContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext(undefined);\nexport const useSocket = () => {\n  _s();\n  const context = useContext(SocketContext);\n  if (context === undefined) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    if (user) {\n      const newSocket = io('http://localhost:5000', {\n        auth: {\n          token: localStorage.getItem('token')\n        }\n      });\n      newSocket.on('connect', () => {\n        setIsConnected(true);\n        newSocket.emit('user_connected', user.id);\n      });\n      newSocket.on('disconnect', () => {\n        setIsConnected(false);\n      });\n      setSocket(newSocket);\n      return () => {\n        newSocket.close();\n      };\n    } else {\n      if (socket) {\n        socket.close();\n        setSocket(null);\n        setIsConnected(false);\n      }\n    }\n  }, [user]);\n  const value = {\n    socket,\n    isConnected\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s2(SocketProvider, \"z1g/R6n01+HV4cJulTVuMOlxkIY=\", false, function () {\n  return [useAuth];\n});\n_c = SocketProvider;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","useAuth","jsxDEV","_jsxDEV","SocketContext","undefined","useSocket","_s","context","Error","SocketProvider","children","_s2","socket","setSocket","isConnected","setIsConnected","user","newSocket","auth","token","localStorage","getItem","on","emit","id","close","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/moeezahmad/CareAI/client/src/contexts/SocketContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { io, Socket } from 'socket.io-client';\nimport { useAuth } from './AuthContext';\n\ninterface SocketContextType {\n  socket: Socket | null;\n  isConnected: boolean;\n}\n\nconst SocketContext = createContext<SocketContextType | undefined>(undefined);\n\nexport const useSocket = () => {\n  const context = useContext(SocketContext);\n  if (context === undefined) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n\ninterface SocketProviderProps {\n  children: ReactNode;\n}\n\nexport const SocketProvider: React.FC<SocketProviderProps> = ({ children }) => {\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const { user } = useAuth();\n\n  useEffect(() => {\n    if (user) {\n      const newSocket = io('http://localhost:5000', {\n        auth: {\n          token: localStorage.getItem('token')\n        }\n      });\n\n      newSocket.on('connect', () => {\n        setIsConnected(true);\n        newSocket.emit('user_connected', user.id);\n      });\n\n      newSocket.on('disconnect', () => {\n        setIsConnected(false);\n      });\n\n      setSocket(newSocket);\n\n      return () => {\n        newSocket.close();\n      };\n    } else {\n      if (socket) {\n        socket.close();\n        setSocket(null);\n        setIsConnected(false);\n      }\n    }\n  }, [user]);\n\n  const value: SocketContextType = {\n    socket,\n    isConnected,\n  };\n\n  return (\n    <SocketContext.Provider value={value}>\n      {children}\n    </SocketContext.Provider>\n  );\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAmB,OAAO;AACxF,SAASC,EAAE,QAAgB,kBAAkB;AAC7C,SAASC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOxC,MAAMC,aAAa,gBAAGR,aAAa,CAAgCS,SAAS,CAAC;AAE7E,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAMC,OAAO,GAAGX,UAAU,CAACO,aAAa,CAAC;EACzC,IAAII,OAAO,KAAKH,SAAS,EAAE;IACzB,MAAM,IAAII,KAAK,CAAC,gDAAgD,CAAC;EACnE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,SAAS;AAYtB,OAAO,MAAMI,cAA6C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7E,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAgB,IAAI,CAAC;EACzD,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM;IAAEkB;EAAK,CAAC,GAAGhB,OAAO,CAAC,CAAC;EAE1BH,SAAS,CAAC,MAAM;IACd,IAAImB,IAAI,EAAE;MACR,MAAMC,SAAS,GAAGlB,EAAE,CAAC,uBAAuB,EAAE;QAC5CmB,IAAI,EAAE;UACJC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO;QACrC;MACF,CAAC,CAAC;MAEFJ,SAAS,CAACK,EAAE,CAAC,SAAS,EAAE,MAAM;QAC5BP,cAAc,CAAC,IAAI,CAAC;QACpBE,SAAS,CAACM,IAAI,CAAC,gBAAgB,EAAEP,IAAI,CAACQ,EAAE,CAAC;MAC3C,CAAC,CAAC;MAEFP,SAAS,CAACK,EAAE,CAAC,YAAY,EAAE,MAAM;QAC/BP,cAAc,CAAC,KAAK,CAAC;MACvB,CAAC,CAAC;MAEFF,SAAS,CAACI,SAAS,CAAC;MAEpB,OAAO,MAAM;QACXA,SAAS,CAACQ,KAAK,CAAC,CAAC;MACnB,CAAC;IACH,CAAC,MAAM;MACL,IAAIb,MAAM,EAAE;QACVA,MAAM,CAACa,KAAK,CAAC,CAAC;QACdZ,SAAS,CAAC,IAAI,CAAC;QACfE,cAAc,CAAC,KAAK,CAAC;MACvB;IACF;EACF,CAAC,EAAE,CAACC,IAAI,CAAC,CAAC;EAEV,MAAMU,KAAwB,GAAG;IAC/Bd,MAAM;IACNE;EACF,CAAC;EAED,oBACEZ,OAAA,CAACC,aAAa,CAACwB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAhB,QAAA,EAClCA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACpB,GAAA,CA9CWF,cAA6C;EAAA,QAGvCT,OAAO;AAAA;AAAAgC,EAAA,GAHbvB,cAA6C;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}